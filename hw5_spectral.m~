clear;

rng(4);
num_items = 100;
num_dimensions = 2;
data = randi(num_items,num_items,num_dimensions);

K = 3;

memberships = zeros(size(data,1), 1);

% We need to turn our points into an adjacency matrix to get
% Laplacian Matrix
adjacencyMatrix = zeros(size(data,1));
degreeVector = zeros(1,size(data,1));

for i = 1:size(data,1)
   for j = i:size(data,1)
        diff = data(i,:)-data(j,:);
        dist = sqrt(sum(diff.*diff,2));
        
        score = dist;
        
        if score > 0
            degreeVector(i) = degreeVector(i)+1;
            degreeVector(j) = degreeVector(j)+1;
        end
        
        adjacencyMatrix(i,j)=score;
        adjacencyMatrix(j,i)=score;
   end
end

adja = squareform(pdist(data,'euclidean'));

degreeMatrix = diag(degreeVector);

laplacianMatrix = degreeMatrix - adjacencyMatrix;

[eigVecs,eigVals] = eig(laplacianMatrix);

eigVals = diag(eigVals);

[sortedVals,indices] = sort(eigVals,'descend');

selectedIndices = indices(1:num_dimensions);

d_Vecs = eigVecs(:,selectedIndices);

centroids = sortrows(d_Vecs(1:K,:));

[memberships, new_centroids] = customKmeans(d_Vecs,centroids,memberships);

if num_dimensions == 2
    f = customPlotKmeans2D(new_centroids,d_Vecs,memberships,0);
    saveas(f,['./figures/kmeansSpecData.png']);
    f = customPlotKmeans2D(new_centroids,data,memberships,num_items);
    saveas(f,['./figures/kmeansSpecEigVecs.png']);
end